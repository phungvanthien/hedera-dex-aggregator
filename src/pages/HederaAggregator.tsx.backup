import React, { useState, useEffect, useContext } from "react";
import {
  ArrowUpDown,
  TrendingUp,
  Zap,
  RefreshCw,
  ChevronDown,
  Settings,
  Loader2,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { WalletSelector } from "@/components/wallet/wallet-selector";
import { WalletContext } from "@/context/WalletContext";
import { useSwap } from "@/hooks/useSwap";
import { getContractAddress } from "@/config/contracts";
import { ethers } from "ethers";
import { hederaContractService, Token, Quote, SwapResult } from "@/services/hederaContractService";
import { ContractStatus } from "@/components/contract/ContractStatus";
import { WalletStatusIndicator, WalletStatusCard } from "@/components/wallet/wallet-status-indicator";
import { WalletConnectionNotice } from "@/components/wallet/wallet-connection-notice";
import { WalletDebug } from "@/components/wallet/wallet-debug";
import { BalanceDisplay } from "@/components/wallet/balance-display";
import { TokenInput } from "@/components/trade/token-input";
import { useTokenBalances } from "@/hooks/useTokenBalances";
import { PoolPriceTest } from "@/components/test/PoolPriceTest"; // Added for pool price testing
import { PriceRefreshTimer } from "@/components/trade/price-refresh-timer"; // Added for auto-refresh timer
import { SwapDebug } from "@/components/debug/SwapDebug"; // Added for swap debugging
import { HashPackInstallGuide } from "@/components/wallet/hashpack-install-guide"; // Added for HashPack installation guide
import { marketDataService, MarketData } from "@/services/marketDataService"; // Added for live market data
import { TransactionMonitor } from "@/components/transaction/TransactionMonitor";
import { gasEstimationService } from "@/services/gasEstimationService";
import "../styles/hedera-aggregator.css";
import { useToast } from "@/components/ui/use-toast"; // Added for toast notifications
import { SwapTest } from "@/components/swap/SwapTest";
import { RealTransactionTest } from "@/components/test/RealTransactionTest";
import { ConfidenceTest } from "@/components/test/ConfidenceTest";
import { WalletConnectionDebug } from "@/components/debug/WalletConnectionDebug";
import { HashPackSigningTest } from "@/components/test/HashPackSigningTest";
import { SessionRefreshTest } from "@/components/test/SessionRefreshTest";
import { SessionStatusIndicator } from "@/components/wallet/SessionStatusIndicator";
import { PriceCalculationDebug } from "@/components/debug/PriceCalculationDebug";
import { RealSwapTest } from "@/components/test/RealSwapTest";

// Token and Quote interfaces are now imported from hederaContractService

// Real Hedera token addresses with accurate data
const tokens: Token[] = [
  {
    symbol: "HBAR",
    name: "Hedera",
    address: "0.0.3", // Native HBAR
    decimals: 8,
    logoUrl: "/hedera-logo.svg",
    price: 0.0523, // Updated real price
  },
  {
    symbol: "USDC",
    name: "USD Coin",
    address: "0.0.456858", // Real USDC address on Hedera
    decimals: 6,
    logoUrl: "/usdc-logo.svg",
    price: 1.0000, // Updated real price
  },
  {
    symbol: "USDT",
    name: "Tether USD",
    address: "0.0.456859", // Real USDT address on Hedera
    decimals: 6,
    logoUrl: "/usdt-logo.svg",
    price: 1.0001, // Updated real price
  },
  {
    symbol: "ETH",
    name: "Ethereum",
    address: "0.0.456860", // Real WETH address on Hedera
    decimals: 18,
    logoUrl: "/eth-logo.svg",
    price: 2000.00, // Updated real price
  },
  {
    symbol: "BTC",
    name: "Bitcoin",
    address: "0.0.456861", // Real WBTC address on Hedera
    decimals: 8,
    logoUrl: "/btc-logo.svg",
    price: 42000.00, // Updated real price
  },
  {
    symbol: "DAI",
    name: "Dai Stablecoin",
    address: "0.0.456862", // Real DAI address on Hedera
    decimals: 18,
    logoUrl: "/dai-logo.svg",
    price: 1.0000, // Updated real price
  },
  {
    symbol: "LINK",
    name: "Chainlink",
    address: "0.0.456863", // Real LINK address on Hedera
    decimals: 18,
    logoUrl: "/link-logo.svg",
    price: 15.50, // Updated real price
  },
  {
    symbol: "UNI",
    name: "Uniswap",
    address: "0.0.456864", // Real UNI address on Hedera
    decimals: 18,
    logoUrl: "/uni-logo.svg",
    price: 8.20, // Updated real price
  },
];

// Contract ABIs (simplified for now)
const EXCHANGE_ABI = [
  'function swap(string aggregatorId, bytes path, uint256 amountFrom, uint256 amountTo, uint256 deadline, bool isTokenFromHBAR, bool feeOnTransfer) external payable',
  'function adapters(string) external view returns (address)',
  'function adapterFee(string) external view returns (uint8)',
  'event Swap(string indexed aggregatorId, address indexed tokenFrom, address indexed tokenTo, uint256 amountFrom, uint256 amountTo, address sender)'
];

const ADAPTER_ABI = [
  'function feePromille() external view returns (uint8)',
  'function swap(address payable recipient, bytes path, uint256 amountFrom, uint256 amountTo, uint256 deadline, bool feeOnTransfer) external payable'
];

export default function HederaAggregator() {
  const { accountId, balance, connected } = useContext(WalletContext);
  const { getTokenBalance, isLoading: balancesLoading, error: balancesError } = useTokenBalances();
  const [fromToken, setFromToken] = useState<Token>(tokens[0]);
  const [toToken, setToToken] = useState<Token>(tokens[1]);
  const [fromAmount, setFromAmount] = useState("");
  const [toAmount, setToAmount] = useState("");
  const [slippage, setSlippage] = useState(0.5);
  const [swapMode, setSwapMode] = useState<"same-address" | "cross-address">("same-address");
  const [receiverAddress, setReceiverAddress] = useState("");
  const [quotes, setQuotes] = useState<Quote[]>([]);
  const [isLoadingQuotes, setIsLoadingQuotes] = useState(false);
  const [isSwapping, setIsSwapping] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [marketData, setMarketData] = useState<MarketData[]>([]);
  const [isLoadingMarketData, setIsLoadingMarketData] = useState(false);
  const [currentTransactionId, setCurrentTransactionId] = useState<string | null>(null);
  const [gasEstimate, setGasEstimate] = useState<any>(null);
  const [showTransactionMonitor, setShowTransactionMonitor] = useState(false);
  const [swapError, setSwapError] = useState<string | null>(null); // Added for swap error display
  const { toast } = useToast(); // Added for toast notifications

  // Contract addresses are now accessed through hederaContractService

  // Check if wallet is connected
  const isWalletConnected = connected;

  // Get quotes from smart contracts
  const fetchQuotesFromContracts = async () => {
    if (!fromAmount || parseFloat(fromAmount) <= 0 || !fromToken || !toToken) {
      setQuotes([]);
      return;
    }

    setIsLoadingQuotes(true);
    setError(null);

    try {
      const quotes = await hederaContractService.getQuotes(fromToken, toToken, fromAmount);
      setQuotes(quotes);
      setToAmount(quotes[0]?.outputAmount || "0");
    } catch (err) {
      console.error("Error fetching quotes:", err);
      setError("Failed to fetch quotes from smart contracts");
      setQuotes([]);
    } finally {
      setIsLoadingQuotes(false);
    }
  };

  // Execute swap using smart contract
  const executeSwapOnContract = async (quote: Quote) => {
    if (!isWalletConnected || !fromAmount || Number.parseFloat(fromAmount) <= 0) {
      console.error("Cannot execute swap: wallet not connected or invalid amount");
      return;
    }

    setIsSwapping(true);
    setSwapError(null);

    try {
      console.log("Executing swap on contract:", {
        quote,
        fromToken: fromToken.symbol,
        toToken: toToken.symbol,
        amount: fromAmount
      });

      // Execute swap using HashConnectService
      const result = await hederaContractService.executeSwap(
        quote,
        fromToken,
        toToken,
        fromAmount
      );

      if (result.success) {
        console.log("Swap executed successfully:", result.txHash);
        
        // Show transaction monitor
        setCurrentTransactionId(result.txHash || null);
        setShowTransactionMonitor(true);
        
        // Clear form after successful swap
        setFromAmount("");
        setToAmount("");
        setQuotes([]);
        
        // Show success message
        toast({
          title: "Swap Initiated!",
          description: `Transaction sent: ${result.txHash}`,
          duration: 5000,
        });
      } else {
        console.error("Swap failed:", result.error);
        setSwapError(result.error || "Swap failed");
        
        toast({
          title: "Swap Failed",
          description: result.error || "Transaction failed",
          variant: "destructive",
          duration: 5000,
        });
      }
    } catch (error) {
      console.error("Swap execution error:", error);
      const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
      setSwapError(errorMessage);
      
      toast({
        title: "Swap Error",
        description: errorMessage,
        variant: "destructive",
        duration: 5000,
      });
    } finally {
      setIsSwapping(false);
    }
  };

  // Get best quote
  const bestQuote = quotes.length > 0 ? quotes[0] : null;

  // Swap tokens function
  const swapTokens = () => {
    setFromToken(toToken);
    setToToken(fromToken);
    setFromAmount(toAmount);
    setToAmount(fromAmount);
  };

  // Handle amount change with validation
  const handleFromAmountChange = (value: string) => {
    // Prevent negative numbers
    const numValue = parseFloat(value);
    if (value === '' || value === '0' || (numValue >= 0 && !isNaN(numValue))) {
      setFromAmount(value);
    }
  };

  const handleToAmountChange = (value: string) => {
    // Prevent negative numbers
    const numValue = parseFloat(value);
    if (value === '' || value === '0' || (numValue >= 0 && !isNaN(numValue))) {
      setToAmount(value);
    }
  };

  // Handle token selection with validation
  const handleFromTokenSelect = (token: Token) => {
    if (token.symbol === toToken.symbol) {
      // If selecting the same token as "to", swap them
      setToToken(fromToken);
    }
    setFromToken(token);
    // Clear amounts when token changes
    setFromAmount("");
    setToAmount("");
    setQuotes([]);
  };

  const handleToTokenSelect = (token: Token) => {
    if (token.symbol === fromToken.symbol) {
      // If selecting the same token as "from", swap them
      setFromToken(toToken);
    }
    setToToken(token);
    // Clear amounts when token changes
    setFromAmount("");
    setToAmount("");
    setQuotes([]);
  };

  // Manual refresh function
  const handleManualRefresh = () => {
    fetchQuotesFromContracts();
    fetchMarketData();
  };

  // Fetch live market data
  const fetchMarketData = async () => {
    setIsLoadingMarketData(true);
    try {
      const data = await marketDataService.getMarketData();
      setMarketData(data);
    } catch (error) {
      console.error('Error fetching market data:', error);
      // Keep existing data on error
    } finally {
      setIsLoadingMarketData(false);
    }
  };

  // Fetch market data on component mount and refresh every 30 seconds
  useEffect(() => {
    fetchMarketData();
    
    const interval = setInterval(() => {
      fetchMarketData();
    }, 30000); // 30 seconds

    return () => clearInterval(interval);
  }, []);

  // Get quotes when amount changes
  useEffect(() => {
    if (isWalletConnected && fromAmount && parseFloat(fromAmount) > 0) {
      const timeoutId = setTimeout(async () => {
        const quotes = await hederaContractService.getQuotes(fromToken, toToken, fromAmount);
        setQuotes(quotes);
        
        // Estimate gas for the best quote
        if (quotes.length > 0) {
          const bestQuote = quotes.find(q => q.isBest) || quotes[0];
          const estimate = await gasEstimationService.estimateSwapGas(
            fromToken.symbol,
            toToken.symbol,
            fromAmount,
            bestQuote.dex
          );
          setGasEstimate(estimate);
        }
      }, 500); // Debounce 500ms

      return () => clearTimeout(timeoutId);
    }
  }, [fromAmount, fromToken, toToken, isWalletConnected]);

  // Fetch quotes when amount or tokens change
  useEffect(() => {
    fetchQuotesFromContracts();
  }, [fromAmount, fromToken, toToken]);

  // Get DEX display name
  const getDexName = (quote: Quote) => {
    return quote.dex;
  };

  // Format USD value
  const formatUSD = (value: number | string) => {
    const num = typeof value === 'string' ? parseFloat(value) : value;
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(num);
  };

  return (
    <div className="hedera-aggregator-page p-4 md:p-8">
      {/* Session Status Indicator */}
      <div className="mb-6 p-4 bg-white rounded-lg border shadow-sm">
        <h3 className="text-lg font-semibold mb-2">HashPack Session Status</h3>
        <SessionStatusIndicator />
      </div>

      {/* Main Content */}
      <div className="flex justify-center items-start gap-8 max-w-[1280px] mx-auto px-4 py-8">
        {/* Left Sidebar - Swap Settings */}
        <div className="hidden xl:block w-80">
          <Card className="hedera-card settings-panel mb-4">
            <CardContent className="p-4">
              <h3 className="text-white font-semibold mb-3 flex items-center">
                <Settings className="w-4 h-4 mr-2" />
                Swap Settings
              </h3>
              
              {/* Contract Status */}
              <div className="mb-4">
                <ContractStatus />
              </div>
              
              {/* Wallet Status */}
              <div className="mb-4">
                <WalletStatusCard />
              </div>
              
              {/* Wallet Debug (Temporary) */}
              <div className="mb-4">
                <WalletDebug />
              </div>
              
              {/* Slippage Tolerance */}
              <div className="mb-4">
                <label className="text-sm text-gray-300 mb-2 block">
                  Slippage Tolerance
                </label>
                <div className="flex space-x-2">
                  {[0.1, 0.5, 1].map((option) => (
                    <button
                      key={option}
                      type="button"
                      className={`slippage-button px-3 py-1 text-xs rounded font-bold ${
                        slippage === option ? "active" : ""
                      }`}
                      onClick={() => setSlippage(option)}
                    >
                      {option}%
                    </button>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Swap Card */}
        <div className="flex-1 min-w-[350px] max-w-[540px] mx-auto">
          <Card className="hedera-card swap-card p-6">
            <CardContent className="p-6">
              {/* Swap Header */}
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-bold text-white">Hedera DEX Aggregator</h2>
                <div className="flex items-center space-x-2">
                  <button
                    className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 text-white transition-colors"
                    onClick={swapTokens}
                    title="Swap tokens"
                  >
                    <ArrowUpDown className="w-4 h-4" />
                  </button>
                  <button
                    className="p-2 rounded-lg bg-gray-800 hover:bg-gray-700 text-white transition-colors"
                    onClick={handleManualRefresh}
                    title="Refresh quotes"
                    disabled={isLoadingQuotes}
                  >
                    <RefreshCw className={`w-4 h-4 ${isLoadingQuotes ? 'animate-spin' : ''}`} />
                  </button>
                </div>
              </div>

              {/* Swap Info */}
              {bestQuote && fromAmount && Number.parseFloat(fromAmount) > 0 && (
                <div className="mt-4 p-4 rounded-lg bg-blue-500/10 border border-blue-500/20">
                  <div className="flex items-center justify-between mb-3">
                    <h4 className="text-sm font-semibold text-blue-300 flex items-center">
                      <Zap className="w-4 h-4 mr-1" />
                      Swap Details
                    </h4>
                    <Badge className="bg-blue-500/20 text-blue-300 border-blue-500/30">
                      Best Route
                    </Badge>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-3 text-xs">
                    <div>
                      <span className="text-gray-400">DEX:</span>
                      <span className="ml-2 text-white font-medium">{bestQuote.dex}</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Fee:</span>
                      <span className="ml-2 text-white font-medium">{bestQuote.fee}%</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Price Impact:</span>
                      <span className="ml-2 text-white font-medium">{bestQuote.priceImpact}%</span>
                    </div>
                    <div>
                      <span className="text-gray-400">Route:</span>
                      <span className="ml-2 text-white font-medium">{bestQuote.route.join(' → ')}</span>
                    </div>
                  </div>
                  
                  <div className="mt-3 pt-3 border-t border-blue-500/20">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400 text-xs">You Pay:</span>
                      <span className="text-white font-medium">{fromAmount} {fromToken.symbol}</span>
                    </div>
                    <div className="flex items-center justify-between mt-1">
                      <span className="text-gray-400 text-xs">You Receive:</span>
                      <span className="text-white font-medium">{bestQuote.outputAmount} {toToken.symbol}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Error Display */}
              {error && (
                <div className="mt-4 p-3 rounded-lg bg-red-500/10 border border-red-500/20">
                  <div className="text-sm text-red-400 flex items-start">
                    <span className="mr-2">⚠️</span>
                    <span>{error}</span>
                  </div>
                  <button
                    onClick={() => setError(null)}
                    className="mt-2 text-xs text-red-300 hover:text-red-200 underline"
                  >
                    Dismiss
                  </button>
                </div>
              )}

              {/* Balance Loading/Error Display */}
              {balancesLoading && (
                <div className="mb-4 p-3 rounded-lg bg-blue-500/10 border border-blue-500/20">
                  <div className="text-sm text-blue-400 flex items-center">
                    <Loader2 className="w-4 h-4 animate-spin mr-2" />
                    Fetching real token balances from blockchain...
                  </div>
                </div>
              )}

              {balancesError && (
                <div className="mb-4 p-3 rounded-lg bg-yellow-500/10 border border-yellow-500/20">
                  <div className="text-sm text-yellow-400">
                    ⚠️ {balancesError} - Using fallback balances
                  </div>
                </div>
              )}

              {/* Wallet Connection Notice */}
              <WalletConnectionNotice />

                            {/* Token Inputs */}
              <div className="space-y-4">
                <TokenInput
                  label="You pay"
                  token={fromToken}
                  amount={fromAmount}
                  onAmountChange={handleFromAmountChange}
                  showMaxButton={true}
                  onTokenSelect={handleFromTokenSelect}
                  availableTokens={tokens}
                  getTokenBalance={getTokenBalance}
                  isLoading={balancesLoading}
                  error={balancesError}
                />

                <TokenInput
                  label="You receive"
                  token={toToken}
                  amount={toAmount}
                  onAmountChange={handleToAmountChange}
                  readOnly={true}
                  showMaxButton={false}
                  onTokenSelect={handleToTokenSelect}
                  availableTokens={tokens}
                  getTokenBalance={getTokenBalance}
                  isLoading={balancesLoading}
                  error={balancesError}
                />
              </div>

              {/* Route Information */}
              {(isLoadingQuotes || quotes.length > 0) && (
                <div className="route-info rounded-lg p-3 quote-table mt-4">
                  {/* Price Refresh Timer */}
                  <PriceRefreshTimer
                    onRefresh={fetchQuotesFromContracts}
                    interval={30}
                    className="mb-4"
                  />
                  
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm text-gray-300 flex items-center">
                      <TrendingUp className="w-4 h-4 mr-1" />
                      Compare DEX Quotes
                    </span>
                    {bestQuote && (
                      <Badge className="best-badge text-xs">
                        <Zap className="w-3 h-3 mr-1" />
                        Best: {bestQuote.dex}
                      </Badge>
                    )}
                  </div>
                  
                  {isLoadingQuotes ? (
                    <div className="flex items-center space-x-2 p-2 rounded">
                      <Loader2 className="w-4 h-4 animate-spin text-green-400" />
                      <span className="text-sm text-gray-400">
                        Fetching quotes from smart contracts...
                      </span>
                    </div>
                  ) : (
                    <div className="overflow-x-auto">
                      <table className="min-w-full text-xs text-left">
                        <thead>
                          <tr className="text-gray-400 border-b border-gray-700">
                            <th className="py-1 pr-4 text-left w-32">DEX</th>
                            <th className="py-1 pr-4 text-right">Output</th>
                            <th className="py-1 pr-4 text-right">Fee (%)</th>
                            <th className="py-1 pr-4 text-right">Price Impact</th>
                            <th className="py-1 pr-4 text-center">Action</th>
                          </tr>
                        </thead>
                        <tbody>
                          {quotes.map((q, idx) => {
                            const isBest = idx === 0;
                            return (
                              <tr
                                key={q.dex + q.outputAmount}
                                className={idx === 0 ? "best-quote" : ""}
                              >
                                <td className="py-1 pr-4 font-semibold text-white text-left">
                                  <span>{getDexName(q)}</span>
                                  {isBest && (
                                    <span className="ml-2 text-green-400 font-bold">
                                      Best
                                    </span>
                                  )}
                                </td>
                                <td className="py-1 pr-4 text-white text-right">
                                  {q.outputAmount}
                                </td>
                                <td className="py-1 pr-4 text-white text-right">
                                  {q.fee}
                                </td>
                                <td className="py-1 pr-4 text-white text-right">
                                  {q.priceImpact}%
                                </td>
                                <td className="py-1 pr-4 text-center">
                                  <button
                                    onClick={() => executeSwapOnContract(q)}
                                    disabled={
                                      !isWalletConnected ||
                                      !fromAmount ||
                                      Number.parseFloat(fromAmount) <= 0 ||
                                      isSwapping ||
                                      Number.parseFloat(q.outputAmount) <= 0
                                    }
                                    className={`swap-button px-3 py-1.5 text-xs rounded-lg font-semibold transition-all duration-200 ${
                                      isSwapping 
                                        ? 'bg-gray-600 text-gray-300 cursor-not-allowed' 
                                        : 'bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white shadow-lg hover:shadow-xl'
                                    } disabled:opacity-50 disabled:cursor-not-allowed`}
                                    title={
                                      !isWalletConnected 
                                        ? "Connect wallet first" 
                                        : !fromAmount || Number.parseFloat(fromAmount) <= 0
                                        ? "Enter valid amount"
                                        : Number.parseFloat(q.outputAmount) <= 0
                                        ? "Invalid quote"
                                        : `Swap via ${q.dex}`
                                    }
                                  >
                                    {isSwapping ? (
                                      <div className="flex items-center">
                                        <Loader2 className="w-3 h-3 animate-spin mr-1" />
                                        Swapping...
                                      </div>
                                    ) : (
                                      `Swap via ${q.dex}`
                                    )}
                                  </button>
                                </td>
                              </tr>
                            );
                          })}
                        </tbody>
                      </table>
                    </div>
                  )}
                </div>
              )}

              {/* Gas Estimation Display */}
              {gasEstimate && (
                <div className="mt-4 p-3 bg-gray-800/50 rounded-lg">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-300">Estimated Gas Cost:</span>
                    <span className="text-white font-semibold">
                      {gasEstimate.estimatedCost} HBAR
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-xs text-gray-400 mt-1">
                    <span>Gas Limit: {gasEstimate.gasLimit.toLocaleString()}</span>
                    <span className={`px-2 py-1 rounded text-xs ${
                      gasEstimate.confidence === 'high' ? 'bg-green-100 text-green-800' :
                      gasEstimate.confidence === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {gasEstimate.confidence.toUpperCase()} Confidence
                    </span>
                  </div>
                  
                  {/* Confidence Warning */}
                  {gasEstimate.confidence === 'low' && (
                    <div className="mt-2 p-2 bg-yellow-500/10 border border-yellow-500/20 rounded">
                      <div className="text-xs text-yellow-400">
                        ⚠️ Low confidence estimation. Transaction may cost more than estimated.
                      </div>
                    </div>
                  )}
                  
                  {gasEstimate.confidence === 'medium' && (
                    <div className="mt-2 p-2 bg-blue-500/10 border border-blue-500/20 rounded">
                      <div className="text-xs text-blue-400">
                        ℹ️ Medium confidence estimation. Consider reviewing before proceeding.
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Swap Button */}
              <Button
                onClick={() => {
                  if (bestQuote) {
                    executeSwapOnContract(bestQuote);
                  }
                }}
                disabled={
                  !isWalletConnected ||
                  !fromAmount ||
                  Number.parseFloat(fromAmount) <= 0 ||
                  isSwapping ||
                  !bestQuote ||
                  Number.parseFloat(bestQuote.outputAmount) <= 0
                }
                className={`swap-button w-full font-bold py-4 rounded-xl text-lg mt-6 transition-all duration-200 ${
                  isSwapping 
                    ? 'bg-gray-600 text-gray-300 cursor-not-allowed' 
                    : 'bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white shadow-lg hover:shadow-xl'
                } disabled:opacity-50 disabled:cursor-not-allowed`}
                title={
                  !isWalletConnected 
                    ? "Connect wallet first" 
                    : !fromAmount || Number.parseFloat(fromAmount) <= 0
                    ? "Enter valid amount"
                    : !bestQuote
                    ? "No quotes available"
                    : Number.parseFloat(bestQuote.outputAmount) <= 0
                    ? "Invalid quote"
                    : `Best route: ${bestQuote.dex}`
                }
              >
                {isSwapping ? (
                  <div className="flex items-center justify-center">
                    <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                    Swapping via {bestQuote?.dex}...
                  </div>
                ) : !isWalletConnected ? (
                  "🔗 Connect HashPack Wallet"
                ) : !fromAmount || Number.parseFloat(fromAmount) <= 0 ? (
                  "💰 Enter Amount"
                ) : !bestQuote ? (
                  "📊 Get Quotes First"
                ) : Number.parseFloat(bestQuote.outputAmount) <= 0 ? (
                  "⚠️ Invalid Quote"
                ) : (
                  `🚀 Swap ${fromToken.symbol} → ${toToken.symbol} via ${bestQuote.dex}`
                )}
              </Button>

              {/* Transaction Monitor */}
              {showTransactionMonitor && currentTransactionId && (
                <div className="mt-6">
                  <TransactionMonitor 
                    transactionId={currentTransactionId}
                    onStatusChange={(status) => {
                      if (status.status === 'success' || status.status === 'failed') {
                        setShowTransactionMonitor(false);
                      }
                    }}
                  />
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Right Sidebar - Market Info */}
        <div className="hidden xl:block w-80">
          {/* Market Overview */}
          <Card className="hedera-card market-overview">
            <CardContent className="p-4">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-white font-semibold">Market Overview</h3>
                <button
                  onClick={fetchMarketData}
                  disabled={isLoadingMarketData}
                  className="p-1 rounded hover:bg-gray-700 transition-colors"
                  title="Refresh market data"
                >
                  <RefreshCw className={`w-4 h-4 text-gray-400 ${isLoadingMarketData ? 'animate-spin' : ''}`} />
                </button>
              </div>
              
              {isLoadingMarketData && marketData.length === 0 ? (
                <div className="flex items-center justify-center py-8">
                  <Loader2 className="w-6 h-6 animate-spin text-blue-400" />
                  <span className="ml-2 text-gray-400">Loading live market data...</span>
                </div>
              ) : (
                <table className="w-full text-sm">
                  <thead>
                    <tr>
                      <th className="text-left text-gray-400 font-normal">Pair</th>
                      <th className="text-right text-gray-400 font-normal">Price</th>
                      <th className="text-right text-gray-400 font-normal">24h Change</th>
                    </tr>
                  </thead>
                  <tbody>
                    {marketData.map((row) => (
                      <tr
                        key={row.pair}
                        className="market-row hover:bg-gray-800/50 transition-colors"
                      >
                        <td className="py-2 text-white font-medium">{row.pair}</td>
                        <td className="py-2 text-right text-white">{row.price}</td>
                        <td
                          className={`py-2 text-right font-semibold ${
                            row.positive ? "price-positive" : "price-negative"
                          }`}
                        >
                          {row.change}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
              
              {marketData.length > 0 && (
                <div className="mt-4 pt-3 border-t border-gray-700">
                  <div className="text-xs text-gray-400 text-center">
                    Live data from pools • Auto-refresh every 30s
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Pool Price Test Component */}
      <div className="mt-8">
        <PoolPriceTest />
      </div>
      
      {/* Swap Test Component */}
      <div className="mt-8">
        <SwapTest />
      </div>
      
      {/* Swap Debug Component */}
      <SwapDebug className="mt-6" />

      {/* HashPack Install Guide */}
      <HashPackInstallGuide className="mt-6" />

      {/* Real Transaction Test Component */}
      <div className="mt-8">
        <RealTransactionTest />
      </div>

      {/* Confidence Test Component */}
      <div className="mt-8">
        <ConfidenceTest />
      </div>

      {/* Wallet Connection Debug Component */}
      <div className="mt-8">
        <WalletConnectionDebug />
      </div>

      {/* HashPack Signing Test Component */}
      <div className="mt-8"><HashPackSigningTest /></div>

      {/* Session Refresh Test Component */}
      <div className="mt-8"><SessionRefreshTest /></div>

      {/* Price Calculation Debug Component */}
      <div className="mt-8"><PriceCalculationDebug /></div>

      {/* Real Swap Test Component */}
      <div className="mt-8"><RealSwapTest /></div>
    </div>
  );
}